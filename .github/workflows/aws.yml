# This workflow will build and push a new container image to Amazon ECR,
# and then will deploy a new task definition to Amazon ECS, when there is a push to the "master" branch.
#
# To use this workflow, you will need to complete the following set-up steps:
#
# 1. Create an ECR repository to store your images.
#    For example: `aws ecr create-repository --repository-name my-ecr-repo --region us-east-2`.
#    Replace the value of the `ECR_REPOSITORY` environment variable in the workflow below with your repository's name.
#    Replace the value of the `AWS_REGION` environment variable in the workflow below with your repository's region.
#
# 2. Create an ECS task definition, an ECS cluster, and an ECS service.
#    For example, follow the Getting Started guide on the ECS console:
#      https://us-east-2.console.aws.amazon.com/ecs/home?region=us-east-2#/firstRun
#    Replace the value of the `ECS_SERVICE` environment variable in the workflow below with the name you set for the Amazon ECS service.
#    Replace the value of the `ECS_CLUSTER` environment variable in the workflow below with the name you set for the cluster.
#
# 3. Store your ECS task definition as a JSON file in your repository.
#    The format should follow the output of `aws ecs register-task-definition --generate-cli-skeleton`.
#    Replace the value of the `ECS_TASK_DEFINITION` environment variable in the workflow below with the path to the JSON file.
#    Replace the value of the `CONTAINER_NAME` environment variable in the workflow below with the name of the container
#    in the `containerDefinitions` section of the task definition.
#
# 4. Store an IAM user access key in GitHub Actions secrets named `AWS_ACCESS_KEY_ID` and `AWS_SECRET_ACCESS_KEY`.
#    See the documentation for each action used below for the recommended IAM policies for this IAM user,
#    and best practices on handling the access key credentials.

name: Deploy to Amazon ECS

on:
  push:
   branches: [ "feature/docker" ] # Run workflow when commits are made to this branch(es)
  workflow_dispatch: # Allow manual invocation of the workflow

# Prevents the workflow from running in parallel. If a second one starts, the previous is aborted
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  AWS_REGION: us-east-1                   # set this to your preferred AWS region, e.g. us-west-1
  ECR_REPOSITORY_PHP: coreforce-php       # set this to your Amazon ECR repository name
  ECR_REPOSITORY_WEB: coreforce-web       # set this to your Amazon ECR repository name
  ECS_SERVICE: cf-beta-fargate                  # set this to your Amazon ECS service name
  ECS_CLUSTER: cf-fargate-test                 # set this to your Amazon ECS cluster name

permissions:
  contents: read

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push images to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: latest
      run: |
        # Build a docker container and
        # push it to ECR so that it can
        # be deployed to ECS.
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY_WEB:$IMAGE_TAG -f docker/web/Dockerfile docker/web
        docker push $ECR_REGISTRY/$ECR_REPOSITORY_WEB:$IMAGE_TAG
        echo "web_image=$ECR_REGISTRY/$ECR_REPOSITORY_WEB:$IMAGE_TAG" >> $GITHUB_OUTPUT

        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY_PHP:$IMAGE_TAG -f docker/php-fpm/Dockerfile .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY_PHP:$IMAGE_TAG
        echo "php_image=$ECR_REGISTRY/$ECR_REPOSITORY_PHP:$IMAGE_TAG" >> $GITHUB_OUTPUT

    - name: Download ECS task definition
      run: |
        aws ecs describe-task-definition --task-definition coreforce-docker-fargate --query taskDefinition > task-definition.json
    
    - name: Deploy Task Definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        # The path to the ECS task definition file to register
        task-definition: task-definition.json
        # The name of the ECS service to deploy to. The action will only register the task definition if no service is given.
        service: ${{ env.ECS_SERVICE }}
        # The name of the ECS service's cluster.  Will default to the 'default' cluster
        cluster: ${{ env.ECS_CLUSTER }}
        # Whether to wait for the ECS service to reach stable state after deploying the new task definition. Valid value is "true". Will default to not waiting.
        wait-for-service-stability: true
        # Whether to force a new deployment of the service. Valid value is "true". Will default to not force a new deployment.
        force-new-deployment: true
